import time
from characterPrints import enemyPrint, playerPrint
import curses
import random
window = curses.initscr() # Initialize the library. Returns a WindowObject which represents the whole screen.
window.keypad(True) # Escape sequences generated by some keys (keypad, function keys) will be interpreted by curses.
curses.cbreak() # Keys are read one by one. Also safer than curses.raw() because you can still interrupt a running script with hotkeys.
curses.noecho() 
# Initialize colors.
curses.start_color() # Must be called if the programmer wants to use colors.
curses.init_pair(1, curses.COLOR_BLACK, curses.COLOR_WHITE)
curses.init_pair(2, curses.COLOR_WHITE, curses.COLOR_BLACK)
black = curses.color_pair(1)
white = curses.color_pair(2)
curses.init_pair(3, curses.COLOR_GREEN, curses.COLOR_BLACK)
curses.init_pair(4, curses.COLOR_YELLOW, curses.COLOR_BLACK)
curses.init_pair(5, curses.COLOR_RED, curses.COLOR_BLACK)
green = curses.color_pair(3)
yellow = curses.color_pair(4)
red = curses.color_pair(5)
GRUBHUB = {
    "WendyPrice" : 10,
    "WendyHP": 5,
    "SavvyPrice": 20,
    "SavvyHP": 15,
    "ShakeShackPrice": 40,
    "ShakeShackHP": 35,
    "AppleBeesPrice":  70,
    "AppleBeesHP": 100
}
GRUHUBNAMES = [
    "Wendys",
    "Savvy",
    "ShakeShack",
    "AppleBees"
]

def determinePlayerFunc(window, playerChar, playerDict, enemyChar, enemyDict, playerMove):
    if(playerChar == 'Max'):
        maxMoves(window, playerChar, playerDict, enemyChar, enemyDict, playerMove)
    elif(playerChar == 'Brendan'):
        brendanMoves(window, playerChar, playerDict, enemyChar, enemyDict, playerMove)
    elif(playerChar == 'Mathias'):
        mathiasMoves(window, playerChar, playerDict, enemyChar, enemyDict, playerMove)

def determineEnemyFunc(window, playerChar, playerDict, enemyChar, enemyDict, playerMove):
    if(enemyChar == 'Brendan'):
        enemyBrendanMoves(window, playerChar, playerDict, enemyChar, enemyDict, playerMove)
    elif(enemyChar == 'Mathias'):
        enemyMathiasMoves(window, playerChar, playerDict, enemyChar, enemyDict, playerMove)

def moveList(window, playerChar, playerDict, enemyChar, enemyDict, playerMove):
    if playerDict["speed"] >= enemyDict["speed"]:
        determinePlayerFunc(window, playerChar, playerDict, enemyChar, enemyDict, playerMove)
        while True:
            rand = random.randrange(0,4)
            if rand == 0 and enemyDict['move1Count'] > 0:
                break
            if rand == 1 and enemyDict['move2Count'] > 0:
                break
            if rand == 2 and enemyDict['move3Count'] > 0:
                break
            if rand == 3 and enemyDict['move4Count'] > 0:
                break
        determineEnemyFunc(window, playerChar, playerDict, enemyChar, enemyDict, rand)
    elif playerDict["speed"] < enemyDict["speed"]:
        rand = 0
        while True:
            rand = random.randrange(0,4)
            if rand == 0 and enemyDict['move1Count'] > 0:
                break
            if rand == 1 and enemyDict['move2Count'] > 0:
                break
            if rand == 2 and enemyDict['move3Count'] > 0:
                break
            if rand == 3 and enemyDict['move4Count'] > 0:
                break
        determineEnemyFunc(window, playerChar, playerDict, enemyChar, enemyDict, rand)
        determinePlayerFunc(window, playerChar, playerDict, enemyChar, enemyDict, playerMove)
        
        
def maxMoves(window, playerChar, playerDict, enemyChar, enemyDict, playerMove):

    if playerDict['currentHP'] <=0:
        return
    miss = False
    if enemyChar == 'Brendan' and enemyDict['ghost'] == True:
        rand = random.randrange(0,100)
        if rand < 20:
            miss = True
        if miss == True:
            window.refresh()
            time.sleep(2)
            window.clear()
            printChars(window, playerChar, enemyChar, enemyDict, playerDict)
            if playerMove == 0:
                window.addstr("Max used {}".format(playerDict["move1"]))
            elif playerMove == 1:
                window.addstr("Max used {}".format(playerDict["move2"]))
            elif playerMove == 2:
                window.addstr("Max used {}".format(playerDict["move3"]))
            elif playerMove == 3:
                window.addstr("Max used {}".format(playerDict["move4"]))
            window.refresh()
            time.sleep(2)
            window.clear()
            printChars(window, playerChar, enemyChar, enemyDict, playerDict)
            window.addstr("Attack missed!")

    #meatball sub slam
    if playerMove == 0 and miss == False:
        window.refresh()
        window.clear()
        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
        window.addstr("Max used {}".format(playerDict["move1"]))
        window.refresh()
        time.sleep(2)
        even = False
        for i in range(0,20):
            window.refresh()
            time.sleep(.1)
            window.clear()
            if not even:
                enemyDict['damaged'] = True
                enemyDict['currentHP'] = enemyDict['currentHP'] - (1*playerDict['strength'])*enemyDict['defense']
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Max threw a steaming hot meatball Sandwhich!")
                even = True
            else: 
                enemyDict['damaged'] = False
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Max threw a steaming hot meatball Sandwhich!")
                even = False
        playerDict["move1Count"] = playerDict["move1Count"] -1
    #Genshin Blast
    if playerMove == 1 and miss == False:
        window.refresh()
        window.clear()
        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
        window.addstr("Max used {}".format(playerDict["move2"]))
        window.refresh()
        time.sleep(2)
        even = False
        for i in range(0,20):
            window.refresh()
            time.sleep(.1)
            window.clear()
            if not even:
                enemyDict['damaged'] = True
                #2.5
                enemyDict['currentHP'] = enemyDict['currentHP'] - 2.5*playerDict['strength']*enemyDict['defense']
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Max Genshin blasted everywhere!")
                even = True
            else: 
                enemyDict['damaged'] = False
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Max Genshin blasted everywhere!")
                even = False
        playerDict["move2Count"] = playerDict["move2Count"] -1
    #Gax Tax
    if playerMove == 2 and miss == False:
        window.refresh()
        window.clear()
        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
        window.addstr("Max used {}".format(playerDict["move3"]))
        window.refresh()
        time.sleep(2)
        even = False
        for i in range(0,12):
            window.refresh()
            time.sleep(.2)
            window.clear()
            if not even:
                enemyDict['damaged'] = True
                enemyDict['currentHP'] = enemyDict['currentHP'] - 1*playerDict['strength']*enemyDict['defense']
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Opponent got Gax-Taxed!")
                even = True
            else: 
                enemyDict['damaged'] = False
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Opponent got Gax-Taxed!")
                even = False
        for i in range(0,10):
            window.refresh()
            time.sleep(.4)
            window.clear()
            playerDict['cashCurrent'] = playerDict['cashCurrent'] + 1
            printChars(window, playerChar, enemyChar, enemyDict, playerDict)
            window.addstr("Gax Cash: ${}".format(playerDict['cashCurrent']))

        playerDict["move3Count"] = playerDict["move3Count"] -1 
    #Grubhub
    if playerMove == 3:
        window.refresh()
        window.clear()
        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
        window.addstr("Max used {}".format(playerDict["move4"]))
        window.refresh()
        time.sleep(2)
        if playerDict['grubHubChoice'] == 0 and playerDict['cashCurrent'] >= GRUBHUB["WendyPrice"]:
            playerDict['cashCurrent'] = playerDict['cashCurrent'] -  GRUBHUB["WendyPrice"]
            for i in range(0,5):
                if playerDict['currentHP'] + 1 <= 120:
                    window.refresh()
                    time.sleep(.2)
                    window.clear()
                    playerDict['currentHP'] = playerDict['currentHP'] + 1
                    printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                    window.addstr("Max ordered Wendy's!")
        elif playerDict['grubHubChoice'] == 1 and playerDict['cashCurrent'] >= GRUBHUB["SavvyPrice"]:
                playerDict['cashCurrent'] = playerDict['cashCurrent'] - GRUBHUB["SavvyPrice"]
                for i in range(0,15):
                    if playerDict['currentHP'] + 1 <= 120:
                        window.refresh()
                        time.sleep(.2)
                        window.clear()
                        playerDict['currentHP'] = playerDict['currentHP'] + 1
                        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                        window.addstr("Max ordered Savvy!")
        elif playerDict['grubHubChoice'] == 2 and playerDict['cashCurrent'] >= GRUBHUB["ShakeShackPrice"]:
                playerDict['cashCurrent'] = playerDict['cashCurrent'] - GRUBHUB["ShakeShackPrice"]
                for i in range(0,35):
                    if playerDict['currentHP'] + 1 <= 120:
                        window.refresh()
                        time.sleep(.2)
                        window.clear()
                        playerDict['currentHP'] = playerDict['currentHP'] + 1
                        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                        window.addstr("Max ordered Shake Shack!")
                        
        elif playerDict['grubHubChoice'] == 3 and playerDict['cashCurrent'] >= GRUBHUB["AppleBeesPrice"]:
                playerDict['cashCurrent'] = playerDict['cashCurrent'] - GRUBHUB["AppleBeesPrice"]
                while playerDict['currentHP'] < 120:
                    window.refresh()
                    time.sleep(.2)
                    window.clear()
                    playerDict['currentHP'] = playerDict['currentHP'] + 1
                    printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                    window.addstr("Max ordered AppleBee's!")
                     # De-initialize the library, and return terminal to normal status.    <-- Works without this on Windows, however in Linux you can't type in the terminal after exiting without this :P

                

        flush_input()
        playerDict["move4Count"] = playerDict["move4Count"] -1        
    

def brendanMoves(window, playerChar, playerDict, enemyChar, enemyDict, playerMove):
    if playerDict['currentHP'] <=0:
        return
    miss = False
    if enemyChar == 'Brendan' and enemyDict['ghost'] == True:
        rand = random.randrange(0,100)
        if rand < 20:
            miss = True
        if miss == True:
            window.refresh()
            time.sleep(2)
            window.clear()
            printChars(window, playerChar, enemyChar, enemyDict, playerDict)
            if playerMove == 0:
                window.addstr("Max used {}".format(playerDict["move1"]))
            elif playerMove == 1:
                window.addstr("Max used {}".format(playerDict["move2"]))
            elif playerMove == 2:
                window.addstr("Max used {}".format(playerDict["move3"]))
            elif playerMove == 3:
                window.addstr("Max used {}".format(playerDict["move4"]))
            window.refresh()
            time.sleep(2)
            window.clear()
            printChars(window, playerChar, enemyChar, enemyDict, playerDict)
            window.addstr("Attack missed!")
    
    if playerMove == 0 and miss == False:
        window.refresh()
        window.clear()
        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
        window.addstr("Brendan used {}".format(playerDict["move1"]))
        window.refresh()
        time.sleep(2)
        even = False
        for i in range(0,20):
            window.refresh()
            time.sleep(.2)
            window.clear()
            damage = (playerDict["speed"] - enemyDict['speed'])/30*playerDict['strength']*enemyDict['defense']
            damage = int(damage)
            if not even:
                enemyDict['damaged'] = True
                enemyDict['currentHP'] = enemyDict['currentHP'] - damage
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Brendan dashed towards his oppenent")
                even = True
            else: 
                enemyDict['damaged'] = False
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Brendan dashed towards his oppenent")
                even = False
        playerDict["move1Count"] = playerDict["move1Count"] -1
    if playerMove == 1 and miss == False:
        window.refresh()
        window.clear()
        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
        window.addstr("Brendan used {}".format(playerDict["move2"]))
        window.refresh()
        time.sleep(2)
        even = False
        for i in range(0,3):
            window.refresh()
            time.sleep(1.5)
            window.clear()
            playerDict['speed'] = playerDict['speed'] + 3
            playerDict['strength'] = playerDict['strength'] + .03
            playerDict['defense'] = playerDict['defense'] - .03
            if i == 0:
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Brendan's speed increased!")
            elif i == 1:
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Brendan's strength increased!")
            if i == 2:
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Brendan's defense increased!")
        playerDict["move2Count"] = playerDict["move2Count"] -1
    if playerMove == 2 and miss == False:
        window.refresh()
        window.clear()
        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
        window.addstr("Brendan used {}".format(playerDict["move3"]))
        window.refresh()
        time.sleep(2)
        even = False
        count = 0
        for i in range(0,7):
            randomINT= random.randrange(0,100)
            if(randomINT < 50):
                for j in range(0,8):
                    window.refresh()
                    time.sleep(.2)
                    window.clear()
                    damage = 1*playerDict['strength']*enemyDict['defense']
                    if not even:
                        enemyDict['damaged'] = True
                        enemyDict['currentHP'] = enemyDict['currentHP'] - damage
                        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                        window.addstr("Brendan chirped at his oppenent")
                        even = True
                    else: 
                        enemyDict['damaged'] = False
                        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                        window.addstr("Brendan chirped at his oppenent")
                        even = False
                count = count + 1
        window.refresh()
        time.sleep(.5)
        window.clear()
        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
        window.addstr("Hit {} times!".format(count))
        window.refresh()
        time.sleep(2)
        window.clear()
        playerDict["move3Count"] = playerDict["move3Count"] -1
    if playerMove == 3:
        window.refresh()
        window.clear()
        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
        window.addstr("Brendan used {}".format(playerDict["move4"]))
        window.refresh()
        time.sleep(2)
        window.clear()
        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
        window.addstr("Attacks have 15% chance of missing!")
        playerDict["ghost"] = True
        playerDict["move4Count"] = playerDict["move4Count"] -1
        window.refresh()
        time.sleep(2)
        window.clear()
    

def mathiasMoves(window, playerChar, playerDict, enemyChar, enemyDict, playerMove):

    if playerDict['currentHP'] <=0:
        return
    miss = False
    if enemyChar == 'Brendan' and enemyDict['ghost'] == True:
        rand = random.randrange(0,100)
        if rand < 20:
            miss = True
        if miss == True:
            window.refresh()
            time.sleep(2)
            window.clear()
            printChars(window, playerChar, enemyChar, enemyDict, playerDict)
            if playerMove == 0:
                window.addstr("Mathias used {}".format(playerDict["move1"]))
            elif playerMove == 1:
                window.addstr("Mathias used {}".format(playerDict["move2"]))
            elif playerMove == 2:
                window.addstr("Mathias used {}".format(playerDict["move3"]))
            elif playerMove == 3:
                window.addstr("Mathias used {}".format(playerDict["move4"]))
            window.refresh()
            time.sleep(2)
            window.clear()
            printChars(window, playerChar, enemyChar, enemyDict, playerDict)
            window.addstr("Attack missed!")

    #debug
    if playerMove == 0 and miss == False:
        window.refresh()
        window.clear()
        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
        window.addstr("Mathias used {}".format(playerDict["move1"]))
        window.refresh()
        time.sleep(2)
        even = False
        for i in range(0,20):
            window.refresh()
            time.sleep(.1)
            window.clear()
            if not even:
                enemyDict['damaged'] = True
                enemyDict['currentHP'] = enemyDict['currentHP'] - (1*playerDict['strength'])*enemyDict['defense']
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Mathias debugged!")
                even = True
            else: 
                enemyDict['damaged'] = False
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Mathias debugged!")
                even = False
        playerDict["move1Count"] = playerDict["move1Count"] -1
    #new Cut
    if playerMove == 1 and miss == False:
        window.refresh()
        window.clear()
        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
        window.addstr("Max used {}".format(playerDict["move2"]))
        window.refresh()
        time.sleep(2)
        even = False
        for i in range(0,20):
            window.refresh()
            time.sleep(.1)
            window.clear()
            if not even:
                enemyDict['damaged'] = True
                #2.5
                enemyDict['currentHP'] = enemyDict['currentHP'] - 20*playerDict['strength']*enemyDict['defense']
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Mathias got a new cut")
                even = True
            else: 
                enemyDict['damaged'] = False
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Mathias got a new cut !")
                even = False
        playerDict["move2Count"] = playerDict["move2Count"] -1
    

    #aptive
    elif playerMove == 2 and miss == False:
        window.refresh()
        window.clear()
        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
        window.addstr("Mathias used {}".format(playerDict["move3"]))
        window.refresh()
        time.sleep(2)
        even = False
        for i in range(0,20):
            window.refresh()
            time.sleep(.1)
            window.clear()
            if not even:
                enemyDict['damaged'] = True
                enemyDict['currentHP'] = enemyDict['currentHP'] - (1*playerDict['strength'])*enemyDict['defense']
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Mathias aptivated his potential!")
                even = True
            else: 
                enemyDict['damaged'] = False
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Mathias aptivated his potential!")
                even = False
        playerDict["move3Count"] = playerDict["move3Count"] -1
    #Now you see me 2
    elif playerMove == 2 and miss == False:
        window.refresh()
        window.clear()
        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
        window.addstr("Mathias used {}".format(playerDict["move4"]))
        window.refresh()
        time.sleep(2)
        even = False
        for i in range(0,20):
            window.refresh()
            time.sleep(.1)
            window.clear()
            if not even:
                enemyDict['damaged'] = True
                enemyDict['currentHP'] = enemyDict['currentHP'] - (1*playerDict['strength'])*enemyDict['defense']
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Mathias disappeared!")
                even = True
            else: 
                enemyDict['damaged'] = False
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Mathias disappeared!")
                even = False
        playerDict["move4Count"] = playerDict["move4Count"] -1

def enemyBrendanMoves(window, playerChar, playerDict, enemyChar, enemyDict, playerMove):

    if enemyDict['currentHP'] <=0:
        return
    if playerMove == 0:
        window.refresh()
        window.clear()
        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
        window.addstr("Brendan used {}".format(enemyDict["move1"]))
        window.refresh()
        time.sleep(2)
        even = False
        for i in range(0,20):
            window.refresh()
            time.sleep(.2)
            window.clear()
            damage = (enemyDict["speed"] - playerDict['speed'])/30*enemyDict['strength']*playerDict['defense']
            damage = int(damage)
            if not even:
                playerDict['damaged'] = True
                playerDict['currentHP'] = playerDict['currentHP'] - damage
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Brendan dashed towards his oppenent")
                even = True
            else: 
                playerDict['damaged'] = False
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Brendan dashed towards his oppenent")
                even = False
        enemyDict["move1Count"] = enemyDict["move1Count"] -1
    if playerMove == 1:
        window.refresh()
        window.clear()
        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
        window.addstr("Brendan used {}".format(enemyDict["move2"]))
        window.refresh()
        time.sleep(2)
        even = False
        for i in range(0,3):
            window.refresh()
            time.sleep(1.5)
            window.clear()
            enemyDict['speed'] = enemyDict['speed'] + 3
            enemyDict['strength'] = enemyDict['strength'] + .03
            enemyDict['defense'] = enemyDict['defense'] - .03
            if i == 0:
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Brendan's speed increased!")
            elif i == 1:
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Brendan's strength increased!")
            if i == 2:
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Brendan's defense increased!")
        enemyDict["move2Count"] = enemyDict["move2Count"] -1
    if playerMove == 2:
        window.refresh()
        window.clear()
        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
        window.addstr("Brendan used {}".format(enemyDict["move3"]))
        window.refresh()
        time.sleep(2)
        even = False
        count = 0
        for i in range(0,7):
            randomINT= random.randrange(0,100)
            if(randomINT < 50):
                for j in range(0,8):
                    window.refresh()
                    time.sleep(.2)
                    window.clear()
                    damage = 1*enemyDict['strength']*playerDict['defense']
                    if not even:
                        playerDict['damaged'] = True
                        playerDict['currentHP'] = playerDict['currentHP'] - damage
                        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                        window.addstr("Brendan chirped at his oppenent")
                        even = True
                    else: 
                        playerDict['damaged'] = False
                        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                        window.addstr("Brendan chirped at his oppenent")
                        even = False
                count = count + 1
        window.refresh()
        time.sleep(.5)
        window.clear()
        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
        window.addstr("Hit {} times!".format(count))
        window.refresh()
        time.sleep(2)
        window.clear()
        enemyDict["move3Count"] = enemyDict["move3Count"] -1
    if playerMove == 3:
        window.refresh()
        window.clear()
        printChars(window, playerChar, enemyChar, playerDict, enemyDict)
        window.addstr("Brendan used {}".format(enemyDict["move4"]))
        window.refresh()
        time.sleep(2)
        window.clear()
        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
        window.addstr("Attacks have 15% chance of missing!")
        enemyDict["ghost"] = True
        enemyDict["move4Count"] = enemyDict["move4Count"] -1
    

def enemyMathiasMoves(window, playerChar, playerDict, enemyChar, enemyDict, playerMove):

    if enemyDict['currentHP'] <=0:
        return
    miss = False
    if playerChar == 'Brendan' and playerDict['ghost'] == True:
        rand = random.randrange(0,100)
        if rand < 20:
            miss = True
        if miss == True:
            window.refresh()
            time.sleep(2)
            window.clear()
            printChars(window, playerChar, enemyChar, enemyDict, playerDict)
            if playerMove == 0:
                window.addstr("Mathias used {}".format(enemyDict["move1"]))
            elif playerMove == 1:
                window.addstr("Mathias used {}".format(enemyDict["move2"]))
            elif playerMove == 2:
                window.addstr("Mathias used {}".format(enemyDict["move3"]))
            elif playerMove == 3:
                window.addstr("Mathias used {}".format(enemyDict["move4"]))
            window.refresh()
            time.sleep(2)
            window.clear()
            printChars(window, playerChar, enemyChar, enemyDict, playerDict)
            window.addstr("Attack missed!")

    #debug
    if miss == False:
        window.refresh()
        window.clear()
        printChars(window, playerChar, enemyChar, enemyDict, playerDict)
        window.addstr("Mathias used {}".format(enemyDict["move1"]))
        window.refresh()
        time.sleep(2)
        even = False
        for i in range(0,20):
            window.refresh()
            time.sleep(.1)
            window.clear()
            if not even:
                playerDict['damaged'] = True
                playerDict['currentHP'] = playerDict['currentHP'] - (1*enemyDict['strength'])*playerDict['defense']
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Mathias debugged!")
                even = True
            else: 
                playerDict['damaged'] = False
                printChars(window, playerChar, enemyChar, enemyDict, playerDict)
                window.addstr("Mathias debugged!")
                even = False
        enemyDict["move1Count"] = enemyDict["move1Count"] -1
   


def printChars(window, playerChar, enemyChar, enemyDict, playerDict):
        window.addstr('{}|hp: {:.2f}|\n'.format(enemyChar, max(enemyDict["currentHP"],0)))
        i = 0
        while i < enemyDict["currentHP"]:
            if enemyDict['currentHP'] >= (2/3) * enemyDict["baseHP"]:
                window.addstr("▬",green)
            elif enemyDict['currentHP'] >= (1/4) * enemyDict["baseHP"]:
                window.addstr("▬",yellow)
            else:
                window.addstr("▬",red)
            i = i + 10
        window.addstr("\n")
        enemyPrint(window,enemyChar, enemyDict)
        window.addstr("\n")
        playerPrint(window,playerChar, playerDict)
        window.addstr('                     {}|hp: {:.2f}|\n'.format(playerChar, max(playerDict["currentHP"],0)))
        window.addstr("                     ")
        i = 0
        while i < playerDict["currentHP"]:
            if playerDict['currentHP'] >= (2/3) * playerDict["baseHP"]:
                window.addstr("▬",green)
            elif playerDict['currentHP'] >= (1/4) * playerDict["baseHP"]:
                window.addstr("▬",yellow)
            else:
                window.addstr("▬",red)
            i = i + 10
        window.addstr("\n")

def flush_input():
    try:
        import msvcrt
        while msvcrt.kbhit():
            msvcrt.getch()
    except ImportError:
        import sys, termios    #for linux/unix
        termios.tcflush(sys.stdin, termios.TCIOFLUSH)